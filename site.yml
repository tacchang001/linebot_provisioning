# Ansible playbook for deploying a Flask app
# see:
#     https://github.com/brennv/flask-ansible-example/blob/master/deploy.yml
#

---
# Install system apt packages
- hosts: test-server
  gather_facts: false
  remote_user: devel
  become: yes
  become_method: sudo
  tasks:
  - name: update cache
    apt: name=python-software-properties state=present update_cache=yes cache_valid_time=43200
  - name: install packages
    apt: name={{item}} state=installed
    with_items:
      - git
      - build-essential
      - zlib1g-dev
      - libssl-dev
#      - tree         # Optional
#     - python-pip   # Optional
#     - python-dev   # Optional
      - python3-pip
      - python3-dev
      - nginx
  - name: install pip modules
    pip:
      name: 
      - virtualenv
# ユーザとしてインストールする
#      - uwsgi

# Install the app, note: don't do these tasks with become sudo
- hosts: test-server
  gather_facts: false
  become: false

  tasks:

  - name: Manually create the initial virtualenv
    command: virtualenv /home/{{ ansible_ssh_user }}/{{ venv_name }} -p python{{python_version}} creates='/home/{{ ansible_ssh_user }}/{{ venv_name }}'
# '

  - stat: path=/home/{{ ansible_ssh_user }}/{{ app_name }}
    register: f
  - name: clone repo
    git:
      repo: git@github.com:{{ github_user }}/{{ app_name }}.git
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
      accept_hostkey: yes
#    when: not f.stat.exists
    become: false
  - name: install modules in a virtualenv
    pip:
      requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
      virtualenv: /home/{{ ansible_ssh_user }}/{{ venv_name }}
      virtualenv_python: python{{python_version}}

# Configure app service and nginx
- hosts: test-server
  gather_facts: false
  become: yes
  become_method: sudo
  tasks:
  - name: template service config
    copy:
      src: "{{ app_name }}.conf"
      dest: "/etc/init/{{ app_name }}.conf"
#  - name: uWSGI configuration
#    copy:
#      src: "{{ app_name }}.ini"
#      dest: "/home/{{ ansible_ssh_user }}/{{ app_name }}/{{ app_name }}.ini"
  - name: start app service
    service: name={{ app_name }} state=restarted enabled=yes
  - name: template nginx site config
    template:
      src: "{{ app_name }}.nginx"
      dest: /etc/nginx/sites-available/{{ app_name }}
  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent
  # - command: mv /etc/nginx/sites-enabled/default /tmp/nginx.sites-enabled.default
  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes
  - name: restart nginx
    service: name=nginx state=restarted enabled=yes
  - name: open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full

# Run a quick test to verify the site is working
- hosts: test-server
  tasks:
  - name: get url
    get_url:
      url: http://{{inventory_hostname}}
      dest: /tmp/index.html
  - name: read html
    shell: cat /tmp/index.html
    register: html_contents
  - name: check for string in html
    when: html_contents.stdout.find('hello') != -1
    debug: msg="success!"
